// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/storage/interface.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/vestlog/nix/pkg/models"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// SaveUser mocks base method
func (m *MockDatabase) SaveUser(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser
func (mr *MockDatabaseMockRecorder) SaveUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockDatabase)(nil).SaveUser), user)
}

// GetUser mocks base method
func (m *MockDatabase) GetUser(id string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockDatabaseMockRecorder) GetUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockDatabase)(nil).GetUser), id)
}

// SaveGoogleUser mocks base method
func (m *MockDatabase) SaveGoogleUser(user *models.GoogleUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveGoogleUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveGoogleUser indicates an expected call of SaveGoogleUser
func (mr *MockDatabaseMockRecorder) SaveGoogleUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveGoogleUser", reflect.TypeOf((*MockDatabase)(nil).SaveGoogleUser), user)
}

// GetGoogleUser mocks base method
func (m *MockDatabase) GetGoogleUser(id string) (*models.GoogleUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoogleUser", id)
	ret0, _ := ret[0].(*models.GoogleUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoogleUser indicates an expected call of GetGoogleUser
func (mr *MockDatabaseMockRecorder) GetGoogleUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoogleUser", reflect.TypeOf((*MockDatabase)(nil).GetGoogleUser), id)
}

// GetPosts mocks base method
func (m *MockDatabase) GetPosts() ([]models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts")
	ret0, _ := ret[0].([]models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts
func (mr *MockDatabaseMockRecorder) GetPosts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockDatabase)(nil).GetPosts))
}

// GetPost mocks base method
func (m *MockDatabase) GetPost(key string) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPost", key)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPost indicates an expected call of GetPost
func (mr *MockDatabaseMockRecorder) GetPost(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPost", reflect.TypeOf((*MockDatabase)(nil).GetPost), key)
}

// SavePost mocks base method
func (m *MockDatabase) SavePost(post *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePost indicates an expected call of SavePost
func (mr *MockDatabaseMockRecorder) SavePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePost", reflect.TypeOf((*MockDatabase)(nil).SavePost), post)
}

// UpdatePost mocks base method
func (m *MockDatabase) UpdatePost(post *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePost", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePost indicates an expected call of UpdatePost
func (mr *MockDatabaseMockRecorder) UpdatePost(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePost", reflect.TypeOf((*MockDatabase)(nil).UpdatePost), post)
}

// DeletePost mocks base method
func (m *MockDatabase) DeletePost(postid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePost", postid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePost indicates an expected call of DeletePost
func (mr *MockDatabaseMockRecorder) DeletePost(postid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePost", reflect.TypeOf((*MockDatabase)(nil).DeletePost), postid)
}

// GetComments mocks base method
func (m *MockDatabase) GetComments() ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments")
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments
func (mr *MockDatabaseMockRecorder) GetComments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockDatabase)(nil).GetComments))
}

// GetComment mocks base method
func (m *MockDatabase) GetComment(key string) (*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComment", key)
	ret0, _ := ret[0].(*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComment indicates an expected call of GetComment
func (mr *MockDatabaseMockRecorder) GetComment(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComment", reflect.TypeOf((*MockDatabase)(nil).GetComment), key)
}

// SaveComment mocks base method
func (m *MockDatabase) SaveComment(comment *models.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveComment", comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveComment indicates an expected call of SaveComment
func (mr *MockDatabaseMockRecorder) SaveComment(comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveComment", reflect.TypeOf((*MockDatabase)(nil).SaveComment), comment)
}

// GetCommentsPostID mocks base method
func (m *MockDatabase) GetCommentsPostID(postid string) ([]models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentsPostID", postid)
	ret0, _ := ret[0].([]models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentsPostID indicates an expected call of GetCommentsPostID
func (mr *MockDatabaseMockRecorder) GetCommentsPostID(postid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentsPostID", reflect.TypeOf((*MockDatabase)(nil).GetCommentsPostID), postid)
}

// CreateTables mocks base method
func (m *MockDatabase) CreateTables() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTables")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTables indicates an expected call of CreateTables
func (mr *MockDatabaseMockRecorder) CreateTables() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTables", reflect.TypeOf((*MockDatabase)(nil).CreateTables))
}
